
#if OS_WINDOWS {
    import! "windows/print"
}

print_ptr :: fn (str: *byte) {
	print_ptr_len(str, string_length(str));
}

print_byte :: fn (c: byte) {
    print_ptr_len(*c, 1);
}

print :: fn (str: string) {
	print_ptr_len(str.data, str.length);
}

println :: fn (str: string) {
	print(str);
	print("\n");
}

ASCII_ZERO :: 0b00110000;
BYTE_BUFFER_SIZE :: 8;

print_u64 :: fn (number: u64) {
	if (number == 0) {
        print("0");
	} else {
        buffer : [BYTE_BUFFER_SIZE] byte;
		buffer_count : u64 = 0;
        buffer_index : u64 = 0;

        tmp : u64 = 0;
        while (tmp < BYTE_BUFFER_SIZE) {
            buffer[tmp] = ASCII_ZERO;
            tmp = tmp + 1;
        }

		while (number > 0) {
			tmp = number % 10;
			number = number / 10;

            number_digit := ASCII_ZERO + cast(u8) tmp;
            //print_byte(number_digit);

            // BYTECODE BUG: wrong value (the -1 is ignore?)
            // buffer_index = BYTE_BUFFER_SIZE - 1 - cast(u8) buffer_count;

            buffer_index = (BYTE_BUFFER_SIZE - 1) - cast(u8) buffer_count;
            //print_byte(ASCII_ZERO + buffer_index);
			buffer[buffer_index] = number_digit;
            //print_byte(number_digit);

			buffer_count = buffer_count + 1;
		}

        start_index : u64 = BYTE_BUFFER_SIZE - buffer_count;
		print_ptr_len(*(buffer[start_index]), buffer_count);
	}
}

println_u64 :: fn (number: u64) {
	print_u64(number);
	print("\n");
}

string_length :: fn (str: *byte) -> u32 {
	if !str return 0;

	result : u32 = 0;
	char := &str;
	while (char != 0) {
		result = result + 1;
		char = &(str + result);
	}
	return result;
}
