
#if OS_WINDOWS {
    import! "windows/print"
}

print_ptr :: fn (str: *u8) {
	print_ptr_len(str, string_length(str));
}

print :: fn (str: string) {
	print_ptr(str.data);
}

println :: fn (str: string) {
	print(str);
	print("\n");
}

ASCII_ZERO :: 0b00110000;
_number_buffer : [20] u8;

print_u64 :: fn (number: u64) {
	if (number == 0) print("0");
	else {
		buffer_count := 0;

		tmp : u64;
		while (number > 0) {
			tmp = number % 10;
			number = number / 10;

			_number_buffer[buffer_count] = ASCII_ZERO + cast(u8) tmp;
			buffer_count = buffer_count + 1;
		}
		_number_buffer[buffer_count] = 0;

		_tmp : u8;
		count : u32 = 0;
		half_length := buffer_count / 2;
		while (count < half_length) {
			_tmp = _number_buffer[count];
			_number_buffer[count] = _number_buffer[buffer_count - (count + 1)];
			_number_buffer[buffer_count - (count + 1)] = _tmp;
			count = count + 1;
		}

		print_ptr(*_number_buffer);
	}
}

println_u64 :: fn (number: u64) {
	print_u64(number);
	print("\n");
}

string_length :: fn (str: *u8) -> u32 {
	if !str return 0;

	result : u32 = 0;
	char := &str;
	while (char != 0) {
		result = result + 1;
		char = &(str + result);
	}
	return result;
}
