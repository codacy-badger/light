
VK_MAKE_VERSION :: fn (major: u32, minor: u32, patch: u32) -> u32 {
	((major) << 22) | ((minor) << 12) | (patch)
}

// ENUM VkResult
VK_SUCCESS								:: 0;
VK_NOT_READY							:: 1;
VK_TIMEOUT								:: 2;
VK_EVENT_SET							:: 3;
VK_EVENT_RESET							:: 4;
VK_INCOMPLETE							:: 5;
VK_ERROR_OUT_OF_HOST_MEMORY				:: -1;
VK_ERROR_OUT_OF_DEVICE_MEMORY			:: -2;
VK_ERROR_INITIALIZATION_FAILED			:: -3;
VK_ERROR_DEVICE_LOST					:: -4;
VK_ERROR_MEMORY_MAP_FAILED				:: -5;
VK_ERROR_LAYER_NOT_PRESENT				:: -6;
VK_ERROR_EXTENSION_NOT_PRESENT			:: -7;
VK_ERROR_FEATURE_NOT_PRESENT			:: -8;
VK_ERROR_INCOMPATIBLE_DRIVER			:: -9;
VK_ERROR_TOO_MANY_OBJECTS				:: -10;
VK_ERROR_FORMAT_NOT_SUPPORTED			:: -11;
VK_ERROR_FRAGMENTED_POOL				:: -12;
VK_ERROR_SURFACE_LOST_KHR				:: -1000000000;
VK_ERROR_NATIVE_WINDOW_IN_USE_KHR		:: -1000000001;
VK_SUBOPTIMAL_KHR						:: 1000001003;
VK_ERROR_OUT_OF_DATE_KHR				:: -1000001004;
VK_ERROR_INCOMPATIBLE_DISPLAY_KHR		:: -1000003001;
VK_ERROR_VALIDATION_FAILED_EXT			:: -1000011001;
VK_ERROR_INVALID_SHADER_NV				:: -1000012000;
VK_ERROR_OUT_OF_POOL_MEMORY_KHR			:: -1000069000;
VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR	:: -1000072003;
VK_ERROR_NOT_PERMITTED_EXT				:: -1000174001;
VK_RESULT_BEGIN_RANGE					:: VK_ERROR_FRAGMENTED_POOL;
VK_RESULT_END_RANGE						:: VK_INCOMPLETE;
VK_RESULT_RANGE_SIZE					:: VK_INCOMPLETE - VK_ERROR_FRAGMENTED_POOL + 1;
VK_RESULT_MAX_ENUM						:: 0x7FFFFFFF;

VK_MAX_EXTENSION_NAME_SIZE :: 256;

VkExtensionProperties :: struct {
    extensionName: 	[VK_MAX_EXTENSION_NAME_SIZE]u8;
    specVersion: 	u32;
}

VK_STRUCTURE_TYPE_APPLICATION_INFO :: 0;

VkApplicationInfo :: struct {
    sType:				u32; // VkStructureType
    pNext:				*void;
    pApplicationName:	*u8;
    applicationVersion:	u32;
    pEngineName:		*u8;
    engineVersion:		u32;
    apiVersion:			u32;
}

VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO :: 1;

VkInstanceCreateInfo :: struct {
    sType:						u32; // VkStructureType
    pNext:						*void;
    flags:						u32;
    pApplicationInfo:			*VkApplicationInfo;
    enabledLayerCount:			u32;
    ppEnabledLayerNames:		**u8;
    enabledExtensionCount:		u32;
    ppEnabledExtensionNames:	**u8;
}

#foreign "vulkan-1.dll" {
	vkGetInstanceProcAddr 					:: fn (instance: *void, pName: *u8) -> *void;
	vkEnumerateInstanceExtensionProperties 	:: fn (pLayerName: *u8, pPropertyCount:
		*u32, pProperties: *VkExtensionProperties) -> u32;
	vkCreateInstance 						:: fn (pCreateInfo: *VkInstanceCreateInfo,
		pAllocator: *void, pInstance: *void) -> u32;
}
