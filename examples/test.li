#include "print.li"
#include "sys.li"

@run
main :: fn {
	test_factorial();
	test_cast();
	test_pointers();
	test_function_pointers();
	test_decimals();
	test_arrays();
	test_division();
	test_struct();
	test_scopes();
	test_big_struct();
	test_static_array();
	test_slice();
}

test_factorial :: fn {
	assert(factorial(5) == 120);

	factorial :: fn (number: u32) -> u32 {
		if (number == 0) 1
		else {
			factorial(number - 1) * number
		}
	}
}

test_division :: fn {
	num1 := 0b1010;
	num2 := 9;
	assert(num1 / 5 == 2);
	assert(num2 / 2 == 4);
	num3 := 9.;
	assert(num3 / 2. == 4.5);
}

test_arrays :: fn {
	buffer : [4] s16;

	buffer[0] = 5;
	buffer[1] = 240;
	buffer[2] = 33;
	buffer[3] = 0;

	assert(buffer[0] == 5);
	assert(buffer[1] == 240);
	assert(buffer[2] == 33);
	assert(buffer[3] == 0);
	assert(buffer[3] != 2);
}

test_decimals :: fn {
	dec1 : f32 = 1.23;

	assert(dec1 == 1.23);
	assert(dec1 != 1.20);
}

test_cast :: fn {
	num1 : u8 = 55;
	num2 : u64 = 755;
	num3 : s32 = -num1;

	assert(55 == 55);
	assert(55 == num1);
	assert(num2 == 755);
	assert(-55 == -num1);
}

assert :: fn (condition: bool) {
	if !condition {
		print("ASSERT!");
		sys_exit(1);
	}
}

test_pointers :: fn {
	number : u8 = 0;
	num_ptr := *number;

	set(num_ptr);
	assert(number == 12);

	set :: fn (ptr: *u8) {
		&ptr = 12;
	}
}

FUNC :: fn (num: u64) -> u64;

test_function_pointers :: fn {
	num := repeat_3(sqrt, 3);
	assert(num == 6561);

	repeat_3 :: fn (func: FUNC, num: u64) -> u64 {
		return func(func(func(num)));
	}

	sqrt :: fn (num: u64) -> u64 { num * num }
}

test_struct :: fn {
	vecs : [2]Vec3;
	vecs2 : [2]Vec3;

	Vec3 :: struct {
		x: u8;
		y: u8;
	}

	vecs[0].x = 12;
	vecs[0].y = 16;

	assert(vecs[0].x == 12);
	assert(vecs[0].y == 16);
	assert(vecs[0].y != 49);

	assert(vecs2[1].y != 16);
	vecs2[1] = vecs[0];

	assert(vecs2[1].x == 12);
	assert(vecs2[1].y == 16);
	assert(vecs2[1].y != 49);

	v_ptr := *(vecs[0]);
	v_ptr.x = 14;

	assert(v_ptr.x == 14);
	assert(v_ptr.y == 16);
	assert(v_ptr.y != 59);
}

var :: 12;
func :: fn -> u8 { 13 }

test_scopes :: fn {
	var : u8 = 1;
	assert(var == 1);

	assert(func() == 13);

	{
		assert(func() == 12);
		func :: fn -> u8 { var }
		assert(func() == 12);

		var : u8 = 2;
		var2 : u8 = 3;
		assert(var == 2);
		assert(var2 == 3);
	}

	{
		assert(var == 1);
	}
}

test_big_struct :: fn {
	Vec3 :: struct {
		x: u64;
		y: u64;
		z: u64;
	}

	vec: Vec3;
	vec.x = 1;
	vec.y = 2;
	vec.z = 3;

	assert(vec.x == 1);
	assert(vec.y == 2);
	assert(vec.z == 3);

	handle_vec3(vec, 2);

	vec.y = 982;
	handle_vec3(vec, 982);

	vec2 := create_vec3(12);
	assert(vec2.x == 13);
	assert(vec2.y == 14);
	assert(vec2.z == 15);

	handle_vec3 :: fn (vec: Vec3, number: u64) {
		assert(vec.y == number);
	}

	create_vec3 :: fn (num: u64) -> Vec3 {
		vec: Vec3;
		vec.x = num + 1;
		vec.y = num + 2;
		vec.z = num + 3;
		return vec;
	}
}

test_static_array :: fn {
	ARRAY_SIZE :: 4;
	numbers: [ARRAY_SIZE] u8;

	numbers[0] = 15;
	numbers[1] = 16;
	numbers[2] = 17;

	assert(numbers.length == ARRAY_SIZE);
	assert(numbers.length != 22);

	print_array(numbers);

	print_array :: fn (array: [ARRAY_SIZE] u8) {
		print("Array data -> (");
		print_u64(array.length);
		print(") [ ");
		if (array.length > 0) {
			index := 1;
			print_u64(array[0]);
			while (index < array.length) {
				print(", ");
				print_u64(array[index]);
				index = index + 1;
			}
		}
		print(" ]\n");
	}
}

test_slice :: fn {
	numbers: [4]u8;
	numbers[0] = 13;
	numbers[1] = 14;
	numbers[2] = 15;

	print_u8_slice(numbers);

	print_u8_slice :: fn (array : []u8) {
		print("Slice data -> (");
		print_u64(array.length);
		print(") [ ");
		if (array.length > 0) {
			print_u64(array[0]);
			index := 1;
			while (index < array.length) {
				print(", ");
				print_u64(array[index]);
				index = index + 1;
			}
		}
		print(" ]\n");
	}
}
