import "examples/print.li"
import "examples/windows/user32.li"

// We're not aligning the stack memory, so declaring a 2byte variable
// will make all pointer to further variables invalid
atom : u16;

#run
main :: fn {
	//MessageBox(0, "This is a sample message", "Title", MB_RETRYCANCEL | MB_ICONINFORMATION);

	window_class: WNDCLASSEXA;
	window_class.cbSize 		= 80;
	window_class.style 			= 0;
	window_class.lpfnWndProc 	= DefWindowProc;
	window_class.cbClsExtra 	= 0;
	window_class.cbWndExtra 	= 0;
	window_class.hInstance 		= GetModuleHandle(0);
	window_class.hIcon 			= 0;
	window_class.hCursor 		= 0;
	window_class.hbrBackground 	= 0;
	window_class.lpszMenuName 	= 0;
	window_class.lpszClassName 	= "DemoWindowClass";
	window_class.hIconSm 		= 0;

	atom = RegisterClassEx(*window_class);
	if !atom print("Wrong ATOM!\n");

	window_handle := CreateWindowEx(
		0, window_class.lpszClassName, "Window Name",
		WS_OVERLAPPEDWINDOW | WS_VISIBLE,
		0, 0, 800, 600,
		0, 0, window_class.hInstance, 0
	);

	if (window_handle == 0) {
		err := GetLastError();
		print("ERROR: CreateWindowEx -> ");
		print_u64(err);
		print("\n");
	} else {
		/*msg: MSG;
		while (GetMessage(*msg, window_handle, 0, 0)) {
			if (msg.message == WM_NULL) break;

			print("Message: ");
			print_u64(msg.message);
			print("\n");

			TranslateMessage(*msg);
			DispatchMessage(*msg);
		}*/
	}

	test_factorial();
	test_cast();
	test_pointers();
	test_struct();
	test_decimals();
	test_arrays();
	test_division();
}

assert :: fn (condition: bool) {
	if !condition {
		print("ASSERT: ");
		print(__FILE__);
		print("\n");
		// TODO: add exit function here, we should not continue
	}
}

test_division :: fn {
	num1 := 10;
	num2 := 9;
	assert((num1 / 5) == 2);
	assert((num2 / 2) == 4);
	num3 := 9.;
	assert((num3 / 2.) == 4.5);
}

test_arrays :: fn {
	buffer : [4] s16;

	buffer[0] = 5;
	buffer[1] = 240;
	buffer[2] = 33;
	buffer[3] = 0;

	assert(buffer[0] == 5);
	assert(buffer[1] == 240);
	assert(buffer[2] == 33);
	assert(buffer[3] == 0);
	assert(buffer[3] != 2);
}

test_decimals :: fn {
	dec1 : f64 = 1.23;

	assert(dec1 == 1.23);
	assert(dec1 != 1.20);
}

test_struct :: fn {
	Vec3 :: struct {
		x: u32;
		y: u32;
		z: u32;
	}

	v1 : Vec3;
	v1.x = 12;
	v1.y = 16;
	v1.z = 22;

	assert(v1.x == 12);
	assert(v1.y == 16);
	assert(v1.z == 22);
	assert(v1.y != 49);
}

test_factorial :: fn {
	number := factorial(5);

	assert(number == 120);

	factorial :: fn (number: u32) -> u32 {
		if (number == 0) 1
		else {
			factorial(number - 1) * number
		}
	}
}

test_cast :: fn {
	num1 : u8 = 55;
	num2 : u64 = 755;
	num3 : s32 = -num1;

	assert(55 == 55);
	assert(55 == num1);
	assert(num2 == 755);
	assert(-55 == -num1);
}

test_pointers :: fn {
	number : u8 = 0;
	num_ptr := *number;

	set(num_ptr);
	assert(number == 12);

	set :: fn (ptr: *u8) {
		&ptr = 12;
	}
}

/*import "examples/nix.li"

#run
main :: fn {
	str := "This is asdqweasadsaewqeqweasdasd\tasd text!\n";
	len := string_length(str);
	write(stdout, str, len);
}*/
