import "examples/print.li"
import "examples/window.li"
import "examples/windows/opengl.li"

#run
main :: fn {
	//MessageBox(0, "This is a sample message", "Title", MB_RETRYCANCEL | MB_ICONINFORMATION);

	window_handle := window_create("Light Demo");
	print("window_handle -> ");
	print_u64_hex(cast(u64) window_handle);
	print("\n");

	//window_handle_events(window_handle);

	window_dc := GetDC(window_handle);
	print("window_dc -> ");
	print_u64_hex(cast(u64) window_dc);
	print("\n");

	// TODO: set pixel format for window DC

	gl_context := wglCreateContext(window_dc);
	if gl_context {
		print("gl_context -> ");
		print_u64_hex(cast(u64) gl_context);
		print("\n");
	} else {
		err := GetLastError();
		print("ERROR: wglCreateContext -> ");
		print_u64(err);
		print("\n");
	}

	test_factorial();
	test_cast();
	test_pointers();
	test_struct();
	test_decimals();
	test_arrays();
	test_division();
}

assert :: fn (condition: bool) {
	if !condition {
		print("ASSERT: ");
		print(__FILE__);
		print("\n");
		// TODO: add exit function here, we should not continue
	}
}

test_division :: fn {
	num1 := 10;
	num2 := 9;
	assert((num1 / 5) == 2);
	assert((num2 / 2) == 4);
	num3 := 9.;
	assert((num3 / 2.) == 4.5);
}

test_arrays :: fn {
	buffer : [4] s16;

	buffer[0] = 5;
	buffer[1] = 240;
	buffer[2] = 33;
	buffer[3] = 0;

	assert(buffer[0] == 5);
	assert(buffer[1] == 240);
	assert(buffer[2] == 33);
	assert(buffer[3] == 0);
	assert(buffer[3] != 2);
}

test_decimals :: fn {
	dec1 : f64 = 1.23;

	assert(dec1 == 1.23);
	assert(dec1 != 1.20);
}

test_struct :: fn {
	Vec3 :: struct {
		x: u32;
		y: u32;
		z: u32;
	}

	v1 : Vec3;
	v1.x = 12;
	v1.y = 16;
	v1.z = 22;

	assert(v1.x == 12);
	assert(v1.y == 16);
	assert(v1.z == 22);
	assert(v1.y != 49);
}

test_factorial :: fn {
	number := factorial(5);

	assert(number == 120);

	factorial :: fn (number: u32) -> u32 {
		if (number == 0) 1
		else {
			factorial(number - 1) * number
		}
	}
}

test_cast :: fn {
	num1 : u8 = 55;
	num2 : u64 = 755;
	num3 : s32 = -num1;

	assert(55 == 55);
	assert(55 == num1);
	assert(num2 == 755);
	assert(-55 == -num1);
}

test_pointers :: fn {
	number : u8 = 0;
	num_ptr := *number;

	set(num_ptr);
	assert(number == 12);

	set :: fn (ptr: *u8) {
		&ptr = 12;
	}
}

/*import "examples/nix.li"

#run
main :: fn {
	str := "This is asdqweasadsaewqeqweasdasd\tasd text!\n";
	len := string_length(str);
	write(stdout, str, len);
}*/
