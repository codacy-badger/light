#pragma once

enum Token_Type : uint8_t {
	TOKEN_EOF 				= 0,

	TOKEN_ID,
	TOKEN_NUMBER,
	TOKEN_STRING,

	TOKEN_DOUBLE_AMP,		// &&
	TOKEN_DOUBLE_PIPE,		// ||
	TOKEN_DOUBLE_ADD,		// ++
	TOKEN_DOUBLE_SUB,		// --
	TOKEN_DOUBLE_EQUAL,		// ==
	TOKEN_NOT_EQUAL,		// !=
	TOKEN_GREATER_EQUAL,	// >=
	TOKEN_LESSER_EQUAL,		// <=
	TOKEN_RIGHT_SHIFT,		// >>
	TOKEN_LEFT_SHIFT,		// <<

	TOKEN_IF,				// IF
	TOKEN_ELSE,				// ELSE
	TOKEN_WHILE,			// WHILE
	TOKEN_BREAK,			// BREAK
	TOKEN_CAST,				// CAST
	TOKEN_ARROW,			// ARROW
	TOKEN_STRUCT,			// STRUCT
	TOKEN_FUNCTION,			// FUNCTION
	TOKEN_RETURN,			// RETURN
	TOKEN_IMPORT,			// IMPORT

	TOKEN_EXCLAMATION		= '!',

	TOKEN_AMP				= '&',
	TOKEN_PIPE				= '|',
	TOKEN_CARET				= '^',
	TOKEN_TILDE				= '~',
	TOKEN_ADD				= '+',
	TOKEN_SUB				= '-',
	TOKEN_DIV				= '/',
	TOKEN_MUL				= '*',
	TOKEN_PERCENT			= '%',
	TOKEN_GREATER			= '>',
	TOKEN_LESSER			= '<',

	TOKEN_EQUAL				= '=',
	TOKEN_HASH				= '#',

	TOKEN_STM_END			= ';',
	TOKEN_PAR_OPEN			= '(',
	TOKEN_PAR_CLOSE			= ')',
	TOKEN_BRAC_OPEN			= '{',
	TOKEN_BRAC_CLOSE		= '}',
	TOKEN_SQ_BRAC_OPEN		= '[',
	TOKEN_SQ_BRAC_CLOSE		= ']',
	TOKEN_COLON				= ':',
	TOKEN_COMMA				= ',',
	TOKEN_DOT				= '.',
	TOKEN_AT				= '@',
};

#define CASE_ENUM_TEXT(T, str) case T: return str;

static
const char* token_get_text (Token_Type type) {
	switch (type) {
		CASE_ENUM_TEXT(TOKEN_EOF, 			"<EOF>")

		CASE_ENUM_TEXT(TOKEN_ID,			"<identifier>")
		CASE_ENUM_TEXT(TOKEN_NUMBER,		"<number>")
		CASE_ENUM_TEXT(TOKEN_STRING,		"<string>")

		CASE_ENUM_TEXT(TOKEN_DOUBLE_AMP,	"&&")
		CASE_ENUM_TEXT(TOKEN_DOUBLE_PIPE,	"||")
		CASE_ENUM_TEXT(TOKEN_DOUBLE_ADD,	"++")
		CASE_ENUM_TEXT(TOKEN_DOUBLE_SUB,	"--")
		CASE_ENUM_TEXT(TOKEN_DOUBLE_EQUAL,	"==")
		CASE_ENUM_TEXT(TOKEN_NOT_EQUAL,		"!=")
		CASE_ENUM_TEXT(TOKEN_GREATER_EQUAL,	">=")
		CASE_ENUM_TEXT(TOKEN_LESSER_EQUAL,	"<=")
		CASE_ENUM_TEXT(TOKEN_RIGHT_SHIFT,	">>")
		CASE_ENUM_TEXT(TOKEN_LEFT_SHIFT,	"<<")

		CASE_ENUM_TEXT(TOKEN_IF,			"IF")
		CASE_ENUM_TEXT(TOKEN_ELSE,			"ELSE")
		CASE_ENUM_TEXT(TOKEN_WHILE,			"WHILE")
		CASE_ENUM_TEXT(TOKEN_BREAK,			"BREAK")
		CASE_ENUM_TEXT(TOKEN_CAST,			"CAST")
		CASE_ENUM_TEXT(TOKEN_ARROW,			"ARROW")
		CASE_ENUM_TEXT(TOKEN_STRUCT,		"STRUCT")
		CASE_ENUM_TEXT(TOKEN_FUNCTION,		"FUNCTION")
		CASE_ENUM_TEXT(TOKEN_RETURN,		"RETURN")
		CASE_ENUM_TEXT(TOKEN_IMPORT,		"IMPORT")

		CASE_ENUM_TEXT(TOKEN_EXCLAMATION,	"!")

		CASE_ENUM_TEXT(TOKEN_AMP,			"&")
		CASE_ENUM_TEXT(TOKEN_PIPE,			"|")
		CASE_ENUM_TEXT(TOKEN_CARET,			"^")
		CASE_ENUM_TEXT(TOKEN_TILDE,			"~")
		CASE_ENUM_TEXT(TOKEN_ADD,			"+")
		CASE_ENUM_TEXT(TOKEN_SUB,			"-")
		CASE_ENUM_TEXT(TOKEN_DIV,			"/")
		CASE_ENUM_TEXT(TOKEN_MUL,			"*")
		CASE_ENUM_TEXT(TOKEN_PERCENT,		"%")
		CASE_ENUM_TEXT(TOKEN_GREATER,		">")
		CASE_ENUM_TEXT(TOKEN_LESSER,		"<")

		CASE_ENUM_TEXT(TOKEN_EQUAL,			"=")
		CASE_ENUM_TEXT(TOKEN_HASH,			"#")

		CASE_ENUM_TEXT(TOKEN_STM_END,		";")
		CASE_ENUM_TEXT(TOKEN_PAR_OPEN,		"(")
		CASE_ENUM_TEXT(TOKEN_PAR_CLOSE,		")")
		CASE_ENUM_TEXT(TOKEN_BRAC_OPEN,		"{")
		CASE_ENUM_TEXT(TOKEN_BRAC_CLOSE,	"}")
		CASE_ENUM_TEXT(TOKEN_SQ_BRAC_OPEN,	"[")
		CASE_ENUM_TEXT(TOKEN_SQ_BRAC_CLOSE,	"]")
		CASE_ENUM_TEXT(TOKEN_COLON,			":")
		CASE_ENUM_TEXT(TOKEN_COMMA,			",")
		CASE_ENUM_TEXT(TOKEN_DOT,			".")
		CASE_ENUM_TEXT(TOKEN_AT,			"@")
	}
}
